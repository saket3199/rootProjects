package com.project.tictactoe.game;

import java.util.ArrayList;

import com.project.tictactoe.analyzer.ResultAnalyzer;
import com.project.tictactoe.board.Board;
import com.project.tictactoe.cell.Cell;
import com.project.tictactoe.mark.Mark;
import com.project.tictactoe.player.Player;


public class Game {
	private int size;
	private Board board;
	private ResultAnalyzer resultAnalyzer;
	private Player player;
	private int row=0,col=0;
	Cell cell = new Cell();
//	IGameioable IGameable;
	

	public Game(int size) {
		this.size = size;
		new Board(size);
		player = new Player();
		board = new Board(size);
		resultAnalyzer = new ResultAnalyzer(size);

	}

	public void startGame() {

		TakeInput();
	}

	public int getSize() {
		return size;
	}

	public Cell[][] generateBoard() {
		Cell[][] boards = new Cell[size][size];
		
		return boards;
	}
	public int putMark(ArrayList<Integer> positions) {
		Mark c = Mark.E;
		if (player.isPlayer1()) {
			c = Mark.X;
		} else {
			c = Mark.O;
		}
		this.generateBoard()[row][col].setMark(c);
//		ArrayList<Integer> positions = IGameable.userPosition();
		row = positions.get(0);
		col = positions.get(1);

		if (row < 0 || col < 0 || row > size - 1 || col > size - 1) {
			return 1;

		} else if (this.generateBoard()[row][col] != cell) {
			return 2;

		}
		return 0;	
		
	}
	public int TakeInput() {
		
		
		if (player.isPlayer1()) {
//			IGameable.whoseTurn(player.getP1(), 1);
			return 1;

		} else {
//			IGameable.whoseTurn(player.getP2(), 2);
			return 2;
		}

	
		
	}
		

//		board.generateBoard(generateBoard());
		
//		int row = 0;
//		int col = 0;
		
		
//		IGameable.getUserName();
//		boolean gameEnded = false;
//		while (!gameEnded) {

			// Draw the board

//			IGameable.drawBoard(boards);

			// Print whose turn it is
			

//			while (true) {
//				}

		


//		}


//		IGameable.drawBoard(boards);

//	}

	public int resultAnalysis() {

		if (resultAnalyzer.playerHasWon(this.generateBoard()) == Mark.X) {
//			IGameable.printResult(player.getP1(), 1);
//			gameEnded = true;
			return 1;
		} else if (resultAnalyzer.playerHasWon(this.generateBoard()) == Mark.O) {
//			IGameable.printResult(player.getP2(), 1);
//			gameEnded = true;
			return 2;
		} else {

			if (board.boardIsFull(this.generateBoard())) {
//				IGameable.printResult(player.getP1(), 0);
//				gameEnded = true;
				return 3;
			} else {
				boolean p11 = player.isPlayer1();
				p11 = !player.isPlayer1();
			}

		}
		
		return 0;
		
	}
	

}
